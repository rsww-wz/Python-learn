"""
CPU利用率




多道技术
    目的：想要单核实现并发的效果

    必备知识点
        并发：看起来像同时执行的，就可以称之为并发
        并行：真正意义上的同时执行
        并发 > 并行
        单核计算机不能实现并行，单可以实现并发

    单道(串行)：执行完任务A后才能执行任务B
    多道：在执行任务A的时候，控制硬盘将任务B提前读取的内存

    多道技术重点知识
        空间上的复用：多个程序共用一套计算机硬件
        时间上的复用：多个任务同时执行，时间是任务最长的那个耗时

    例子：洗衣服30min，做饭50min，烧水40min
        单道：先洗衣服，然后做饭，最后烧水，共用时120min
        多道：做饭的时候同时洗衣服和烧水，共用时50min

    多道技术实现：切换 + 保存状态
        需要切换任务，在切换任务之前，需要先保存该任务的完成进度，然后执行别的任务，直到完成

    CPU切换分为两种情况
        1.当一个程序遇到IO操作的时候，操作系统会剥夺该程序的CPU执行权限
            作用：提高了CPU的利用率，并且也不影响程序的执行效率

        2.当一个程序长时间占用CPU的时候，CPU也会剥夺该程序的执行权限
            作用：降低了程序的执行效率(原本时间 + 切换时间)

    注意：切换任务是CPU直接执行的，耗时非常非常的短，可以忽略不计

进程理论
    必备知识点
        程序就是一堆躺在硬盘上代码，是"死"的，在硬盘上
        进行则表示程序正在执行的过程，是"活"的，在内存中

    进程调度
        先来先服务调度算法
            先来的先做
            对长作用有利，对短作业无益

        短作业优先调度
            对短作业有利，对长作业无益

        时间片轮转法+多级反馈队列
            时间片：将固定的时间切分成多片，每一份就表示一个时间片
            当第一个队列中出现了新的任务，那么CPU会立刻停止当前执行的任务，去执行新添加来的第一层队列中的任务
            越往下执行的时间越长，越往下任务执行的优先级越低

        短作业和长作业由CPU自行划分

进程运行的三状态图
    所有程序要想被执行必须经历就绪态
    创建 -> 就绪 -> 运行 -> 退出
    在运行的时候，如果有IO输入等操作(不需要利用CPU的)，会阻塞，等完成这些操作后在执行完成
    阻塞期间会切换到其他任务，阻塞完成后也会先进入就绪态在进入运行态

    总结：就是在就绪态，运行态，阻塞态三个状态之间切换
    就绪 -> (阻塞 -> 就绪) -> 运行

同步和异步
    描述的任务的提交方式

    同步：任务提交之后，原地等待任务返回结果，等待任何过程中，不做任何事
        在程序层面上表现出来的效果感觉就是卡住了

    异步：任务提交之后，不原地等待返回结果，直接去做其他事情了
        提交的任务结果如何获取？
            任务的返回结果会有一个异步回调机制自动处理


阻塞和非阻塞
    描述的程序的运行状态

    阻塞：阻塞态
    非阻塞：就绪态、运行态

    理想状态：让程序永远处于就绪态和运行态(基本无法实现)

上述概念组合
    最高效的一种组合是：异步非阻塞
"""