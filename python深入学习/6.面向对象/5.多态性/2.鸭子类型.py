"""
面向对象的语法都要多态性，都可以实现用父类封装子类统一接口的方法

但是python推崇的是鸭子类型
鸭子类型
    如果你长得像鸭子，你的行为也像鸭子，那么你就是鸭子

    多态性用父类统一接口，需要用到继承，而继承是耦合性，不利于程序各部分独立
    而最好的方法就是假装有一个父类统一接口，而没有在语法上强制有一个父类实现这种统一接口
    这样既可以统一接口，有可以降低程序的耦合性，这就是python的鸭子类型

    python的鸭子类型不是一种语法，而是一种标准规范
    python推崇程序员自觉准守这种标准规范

好处：
    类之间不需要用继承关系，他们之间是独立的
    不需要额外的父类用语法统一接口，而是用标准统一接口
    但是他们需要长得像，也就是功能和名字要一样

理解
    linux操作系统就是一切皆文件，不管你是不是文件，统一都当做文件来处理
    这样的思想就是统一接口的体现

"""


class People:
    def say(self):
        print('啊啊啊')


class Dog:
    def say(self):
        print('汪汪汪')


class Pig:
    def say(self):
        print('哼哼哼')


obj1 = People()
obj2 = Dog()
obj3 = Pig()

# 统一接口的效果
obj1.say()
obj2.say()
obj3.say()
