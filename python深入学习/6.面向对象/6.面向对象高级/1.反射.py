"""
python是动态语言，而反射(reflection)机制被视为动态语言的关键

反射机制
    反射机制是指在程序的运行状态中
    对于任意一个类，都可以知道这个类的所有属性和方法
    对于任意一个对象，都能够调用它的任意属性和方法

    这种动态获取程序信息以及动态调用对象的功能称为反射机制

理解
    反射机制是让程序知道对象和类有什么是可以被调用的
    即可以让程序动态的获取对象的信息(属性和方法)

    反射是一种能力，能让程序在完全不知情的情况下，分析出对象有什么属性

为何要用反射
    例如函数接收的一个参数，可以要访问参数的内部属性，但是又不确定是否有这个属性
    所以需要先判断是否有这个属性，然后再去执行程序
    这就是动态语言的特性(不是运行到这一步，根本不知道他的任何信息，所以要做判断)

如何实现反射
    第一步：通过dir函数，查看某个对象的全部属性
    第二步：通过字符串反射到真正的属性上
        四个内置函数:通过字符串来操作属性值
            hasatter(obj,'属性值')：有这个属性吗
            getatter(obj,'属性值')：获取这个属性
            setatter(obj,'属性值')：设置这个属性
            delatter(obj,'属性值')：删除这个属性

反射的意义
    程序的使用者并不知道你的程序有什么功能，
    在输入的时候，可能会导致程序崩溃，因此需要先做判断，然后执行对应的功能
    所以需要反射机制动态分析使用者的输入可以执行的功能
"""

class Ftp:
    def put(self):
        print('正在执行上传功能')

    def get(self):
        print('正在执行下载功能')

    def interactive(self):
        method = input(">>>:").strip()

        if hasattr(self,method):
            getattr(self,method)()
        else:
            print('输入的指令不存在')

obj = Ftp()
obj.interactive()