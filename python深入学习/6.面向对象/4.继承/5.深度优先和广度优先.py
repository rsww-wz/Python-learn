"""
1. 非菱形问题的多继承查找顺序
    python2和python3的查找顺序都是一样
    都是一个分支一个分支的找下去(把该分支找完，在找另外一个分支)
    但是object都是最后一个被查找的

2. 菱形问题的多继承查找顺序
    如果继承关系为菱形结构，那么经典类与新式类会有不同MRO
    分别对应属性的两种查找方式:深度优先和广度优先

    深度优先--经典类
        先把每一个分支都找完了，再找另一条分支
        也就是第一条分支的时候就把公共父类找掉了

    广度优先--新式类
        也是按住分支找的，但是不会找公共的父类，然后再找另一条分支
        直到最后一条分支才会去找公共的父类

3. 多继承总结
    无论是菱形问题还是非菱形问题的查找顺序都是按照分支查找的
    菱形问题的深度优先查找和广度优先查找的不同是：
        公共父类的查找顺序不同
        深度优先是第一条分支就找公共父类
        广度优先是最后一条分支才找公共父类

    但是python3中都是新式类，也就是都是继承自object类的
    所以python3中的菱形问题都是按照广度优先顺序查找的，也是公共父类是最后一条分支找的

4. 建议
    多继承可以用，但是能不用就不用
    继承结构不要过于复杂
    要在多继承的背景下满足"什么是什么"即mixins机制

"""