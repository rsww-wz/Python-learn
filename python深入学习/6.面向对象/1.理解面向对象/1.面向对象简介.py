"""
面向过程
    核心是过程二字

    过程的终极奥义是就是将程序流程化
    过程是“流水线”，用来分步骤解决问题的

面向对象
    核心是对象二字

    对象的终极奥义就是将程序"整合"
    对象的本质是“容器”，用来盛放数据与功能的

程序 = 数据 + 功能

"""

# 学生的数据
stu_name = 'rs'
stu_age = 19
stu_gender = 'male'

# 课程信息
course_name = 'python'
course_period = '3mons'
course_score = 10

# 学生的功能
def tell_stu():
    print('学生信息 名字：%s 年龄：%s 性别：%s' %(stu_name, stu_age, stu_gender))

# 课程的功能
def tell_course():
    print('课程信息 名字：%s 周期：%s 学分：%s' %(course_name, course_period, course_score))


def go():
    tell_stu()
    tell_course()


"""
上面的程序虽然用函数进行了封装，但是数据和功能之间没有任何关系，没有进行整合
整合的好处：解耦合程序高，使程序清晰，易于维护

应该要创建一个容器，把同一种东西的数据和功能放在一起，形成联系

程序 = 数据 + 功能

学生的容器 = 学生的数据 + 学生的功能
课程的容器 = 课程的数据 + 课程的功能

对象的理解
    只要能盛放数据和功能的容器就是对象
    这种用容器盛放数据和功能的编程思想就是面向对象的编程思想
    所以python是一种面向对象的编程语言
    例如
        用列表和字典存放数据和功能
        用一个模块盛放数据和功能，也能叫对象
        
    而C语言不是面向对象的编程语言，就是因为它没有一种可以实现整合数据和功能的语法
    C语言的结构体只能用来组织不同类型的数据，但是没有办法把函数也组织到结构体中
    
    学习不同语言的面向对象的语法，就是学习语言整合数据和功能的语法
"""

# 使用数据结构组合数据和功能
# 把数据和功能存放在列表，字典或者模块等容器中

# 使用列表存放数据和功能
stu_obj = [stu_name,stu_age,stu_gender,tell_stu]
course_obj = [course_name,course_period,course_score,tell_course]

# 使用字典存放数据和功能
stu_obj_dict = {
    "stu_name":'xm',
    "stu_age":18,
    "stu_gender":'famle',
    "set_info":tell_stu
}

"""
用列表或者字典存放数据和功能的弊端

只是将数据和功能的名字整合在一个容器，并没有将具体的功能也整合到一个容器中
具体的功能还是散落于程序的各处，要修改具体的功能，也不易于查找

因此python提供类的语法来实现这个要求
面向对象的好处是
    容器整合了数据和功能，如果要使用这个对象的数据或者功能直接传一个对象进去即可，而不需要传具体的数据或者功能
    实现了从分散到整合的过程
"""