"""
成员的可见性
    成员：类里面的属性和方法
    如果成员是可见的，可以在类的外修改成员的属性
    作用：提高类的安全性
    切记：千万不要直接操作变量，变量应该通过方法操作

公开和私有
    公开(public)
        如果一个变量没有任何保护措施，那么它就是公开的，就是可见的
        公开的变量可以在外部直接操作
    私有(private)
        外部不可直接操作变量
        如果强制访问，会对对象创建一个新的属性存放你修改的值，但是还是改不掉原来的数据
        但是还是通过某些手段来强制修改，只有你能得到它的名字

    私有性的设置
        在变量名和函数名前加上双下划线即表示私有性


    私有性的破解
        原理：给私有变量取了一个别名，让你从外部访问的时候找不到变量报错
        强行访问：
            强制用双下划线来操作私有的变量还是访问的
            原理是Python自动给这个对象添加了一个新的属性
            这两个属性的名字是一样的，但是并不是同一个变量
            最终表现出来的好像是修改了变量，实际上只是修改了一个同名变量的值

        强行修改
            原理：只要你能得到Python自己给私有变量的别名，就可以操作这个私有变量的数据
            方法：可以用字典打印对象的全部变量，找到那个被改掉的名字，然后就可以修改了

    变量的安全性
        1.不要直接操作变量，每个变量都用一个方法来操作，这样做实际上
            是隐藏了直接管理数据的那个变量，把那个数据隐藏在方法里面
        2.在把变量和方法设置成私有性
        3.因为把变量和方法都设置成私有性，外部不能直接调用，所以需要写一个方法
            来调用这些方法

"""

class Student():
    __sum = '40'

    def __init__(self):
        pass

    def mark(self,grade):
        self.__grade = grade

        if self.__grade < 0:
            return -1
        self.__grade *= 0.6

        return self.__grade


std1 = Student()
while True:
    grade = float(input('请输入你的成绩'))
    if grade < 0:
        print('你的输入不合法，请重新输入')
    else:
        spam = std1.mark(grade)
        print('你的最终成绩为：' + str(spam))
        break
        


    

